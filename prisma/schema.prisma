// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    lifts         Lift[]
    Workout       Workout[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum WeightUnit {
    KG
    LB
}

model Lift {
    id          String     @id @default(cuid())
    name        String
    current_max Float
    weight_unit WeightUnit @default(LB)
    user_id     String

    user     User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Exercise Exercise[]
}

model Workout {
    id      String @id @default(cuid())
    user_id String

    user     User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
    exercise Exercise[]
}

model Exercise {
    id         String @id @default(cuid())
    sets       Int
    reps       Int
    percentage Int
    variation  String

    lift_id String
    lift    Lift   @relation(fields: [lift_id], references: [id], onDelete: Cascade)

    workout_id String
    workouts   Workout @relation(fields: [workout_id], references: [id], onDelete: Cascade)
}
